---------------------------------------------------------------------------
-- AN ELEVATOR CONTROLLER                                                --
---------------------------------------------------------------------------

-- Original example by Alessandra Giordani from the University of Trento.
-- This SMV program describes an elevator system for a 3-floors building.
-- It includes modules both for the physical system (reservation buttons,
-- cabin, door), and for the controller.

---------------------------------------------------------------------------
-- BUTTON                                                                --
---------------------------------------------------------------------------

-- For each floor there is a button to request service, that can be
-- pressed. A pressed button stays pressed unless reset by the
-- controller. A button that is not pressed can become pressed
-- nondeterministically.

MODULE InnerButton(reset, fire)
  VAR
    pressed : boolean;
  ASSIGN
    init(pressed) := FALSE;
    next(pressed) := 
      case
        pressed & fire            : TRUE;
        pressed & !fire & reset   : FALSE;
        pressed & !reset & !fire  : TRUE;
        !pressed          : {FALSE, TRUE};
      esac; 

SPEC AG (!pressed -> !reset)

MODULE Button(reset, fire)
  VAR
    pressed : boolean;
    key     : boolean;

  ASSIGN
    init(pressed) := FALSE;
    next(pressed) :=
      case
        fire                      : FALSE;
        !key                      : FALSE;
        pressed & reset           : FALSE;
        pressed & !reset & key    : TRUE;
        !pressed                  : {FALSE,TRUE};
      esac;
  
  -- Key (or access) should remain the same.
  TRANS
    next(key) = key;

  -- REQ1: The controller must not reset a button that is not pressed.
SPEC AG (!pressed -> !reset)

-- REQ Extra: If there is a fire then the controller does not accept any new button presses.
LTLSPEC G(fire -> X !pressed)
SPEC AG(fire -> AX !pressed)

-- REQ Extra: A button only responds to a push if access is granted
SPEC AG(pressed -> key)

---------------------------------------------------------------------------
-- CABIN                                                                 --
---------------------------------------------------------------------------

-- The cabin can be at any floor between 1 and 3. It is equipped with an
-- engine that has a direction of motion, that can be either stopped, up
-- or down.

MODULE Cabin(direction)
  DEFINE N:=3;

  VAR
    floor     : 1..N;

  ASSIGN
    next(floor) :=
      case
        next(direction) = stop : floor;
        next(direction) = up   : case
				   floor != N: floor + 1;
           TRUE: floor;
                                 esac;
        next(direction) = down : case
				   floor != 1: floor - 1;
           TRUE: floor;
                                 esac;
      esac;

  -- REQ2: The cabin can move up only if the floor is not N.
SPEC AG(floor = N -> AX(direction != up))

  -- REQ3: The cabin can move down only if the floor is not 1.
SPEC AG(floor = 1 -> AX(direction != down))

---------------------------------------------------------------------------
-- DOOR                                                                  --
---------------------------------------------------------------------------

-- The cabin is also equipped with a door, that can be either open
-- or closed. The door can receive either open, close or nop commands
-- from the controller, and it responds opening, closing, or
-- preserving the current state.

MODULE Door(door_cmd)
  VAR
    status : { open, closed };

  ASSIGN
    next(status) :=
      case
        door_cmd = open      : open;
        door_cmd = close     : closed;
        door_cmd = nop       : status;
      esac;

  -- REQ4: The controller can issue an open command only if the door is closed.
LTLSPEC G (door_cmd = open -> status = closed)

  -- REQ5: The controller can issue a close command only if the door is open.
LTLSPEC G (door_cmd = close -> status = open)

---------------------------------------------------------------------------
-- CONTROLLER                                                            --
---------------------------------------------------------------------------

-- The controller takes in input (as sensory signals) the floor and the
-- direction of motion of the cabin, the status of the door, and the
-- status of the four buttons. It decides the controls to the engine, to
-- the door and to the buttons.

MODULE CTRL(floor, door, pressed_1, pressed_2, pressed_3, fire, inner_1, inner_2, inner_3, access_1, access_2, access_3)
  VAR
    direction : {up, down, stop};
    door_cmd : {open, close, nop};
    reset_1 : boolean;
    reset_2 : boolean;
    reset_3 : boolean;
    reset_i_1 : boolean;
    reset_i_2 : boolean;
    reset_i_3 : boolean;
    reset_pending : boolean;

  -- Button N is reset only if it is pressed, we are at floor N, and
  -- the door is open.
  ASSIGN
    reset_1 := (pressed_1 & floor = 1 & door = open);
    reset_i_1 := (inner_1 & floor = 1 & door = open);
    reset_2 := (pressed_2 & floor = 2 & door = open);
    reset_i_2 := (inner_2 & floor = 2 & door = open);
    reset_3 := (pressed_3 & floor = 3 & door = open);
    reset_i_3 := (inner_3 & floor = 3 & door = open);

  -- Check whether there are pending requests at the current floor,
  -- at a higher floor, and at a lower floor.
  DEFINE
    pending_here := (floor = 1 & (pressed_1 | inner_1) & served_1 ) | (floor = 2 & (pressed_2 | inner_2) & served_2) |
                    (floor = 3 & (pressed_3 | inner_3) & served_3) & !reset_pending;

    pending_up   := (floor = 1 & (((pressed_2 | inner_2 ) & served_2) | (pressed_3 | inner_3) & served_3)) |
                    (floor = 2 & (pressed_3 | inner_3) & served_3);

    pending_down := (floor = 3 & ((pressed_1 | inner_1) & served_1 ) | ((pressed_2 | inner_2) & served_2)) |
                    (floor = 2 & (pressed_1 | inner_1) & served_1) ;
    
    served_1 := (access_1 & floor = 1);
    served_2 := (access_2 & floor = 2);
    served_3 := (access_3 & floor = 3);


  -- * If the cabin is moving, do not send commands to the door.
  -- * If there is a pending request at the current floor and
  --   the door is closed, open it.
  -- * If there are pending requests at different floors and the
  --   door is open, close it.
  -- * Otherwise, do not send commands to the door.
  ASSIGN
    door_cmd :=
      case
        direction != stop: nop;
        pending_here & door = closed: open;
        ( pending_down | pending_up) & door = open: close;
        TRUE: nop;
      esac;

  -- Variable "last_dir" records the last movement direction of the cabin.
  VAR
    last_dir : {up,down};
  ASSIGN
    next(last_dir) :=
      case
        direction = stop : last_dir;
        TRUE             : direction;
      esac;

  -- * If the door is open, do not send move commands to the cabin.
  -- * If there is a pending request at the current floor
  --   and the cabin is moving, stop it.
  -- * If there are pending requests both at higher and at lower floors,
  --   keep moving in "last_dir".
  -- * If there are pending requests at higher (lower) floors,
  --   move up (down).
  -- * Otherwise, do not send commands to the cabin.
  ASSIGN
    init(direction) := stop;
    next(direction) :=
      case
        fire & (!inner_1 & !inner_2 & !inner_3): stop;
	      door = open: stop;
        pending_here: stop;
        pending_up & direction = down: stop;
        pending_down & direction = up: stop;
        pending_up & pending_down: last_dir;
        pending_up: up;
        pending_down: down;
        TRUE: stop;
      esac;

  ASSIGN
  next(reset_pending) :=
    case 
      pending_here & door = open: TRUE;
      TRUE: FALSE;
    esac;

  


  -- The cabin needs to stop before it can change direction.
  SPEC AG(direction = up -> AX(direction != down))
  SPEC AG(direction = down -> AX(direction != up))

---------------------------------------------------------------------------
-- MAIN                                                                  --
---------------------------------------------------------------------------

-- The main module shows the connection between modules.

MODULE main
  VAR
    cabin : Cabin(ctrl.direction);
    door  : Door(ctrl.door_cmd);
    fire  : boolean;

    -- button_x.pressed might give us the boolean value of the button.
    button_1 : Button(ctrl.reset_1, fire);
    button_2 : Button(ctrl.reset_2, fire);
    button_3 : Button(ctrl.reset_3, fire);
    inner_1  : InnerButton(ctrl.reset_i_1, fire);
    inner_2  : InnerButton(ctrl.reset_i_2, fire);
    inner_3  : InnerButton(ctrl.reset_i_3, fire);

    ctrl : CTRL(cabin.floor, door.status,
                button_1.pressed, button_2.pressed,
                button_3.pressed, fire, inner_1.pressed, inner_2.pressed, inner_3.pressed, button_1.key, button_2.key, button_3.key);
---------------------------------------------------------------------------
-- REQUIREMENTS                                                          --
---------------------------------------------------------------------------

  -- The controller must satisfy the following requirements.

  -- REQ6: No button can reach a state where it remains pressed forever.
SPEC !(EG (button_1.pressed))
SPEC !(EG (button_2.pressed))
SPEC !(EG (button_3.pressed))

SPEC !(EG (inner_1.pressed))
SPEC !(EG (inner_2.pressed))
SPEC !(EG (inner_3.pressed))

  -- REQ7: No pressed button can be reset until the cabin stops at the
  --      corresponding floor and opens the door.
-- LTLSPEC G (ctrl.direction = stop & door.status = open & cabin.floor = 1 & button_1.pressed  -> button_1.reset)
-- LTLSPEC G (ctrl.direction = stop & door.status = open & cabin.floor = 2 & button_2.pressed -> button_2.reset)
-- LTLSPEC G (ctrl.direction = stop & door.status = open & cabin.floor = 3 & button_3.pressed -> button_3.reset)

SPEC AG (button_1.reset -> ctrl.direction = stop & door.status = open & cabin.floor = 1 & button_1.pressed)
SPEC AG (button_2.reset -> ctrl.direction = stop & door.status = open & cabin.floor = 2 & button_2.pressed)
SPEC AG (button_3.reset -> ctrl.direction = stop & door.status = open & cabin.floor = 3 & button_3.pressed)

SPEC AG (inner_1.reset -> ctrl.direction = stop & door.status = open & cabin.floor = 1 & inner_1.pressed)
SPEC AG (inner_2.reset -> ctrl.direction = stop & door.status = open & cabin.floor = 2 & inner_2.pressed)
SPEC AG (inner_3.reset -> ctrl.direction = stop & door.status = open & cabin.floor = 3 & inner_3.pressed)

  -- REQ8: A button must be reset as soon as the cabin stops at the
  --      corresponding floor with the door open.
-- SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 1 -> !button_1.pressed)
-- LTLSPEC !(G (ctrl.direction = stop & door.status = open & cabin.floor = 1 -> X button_1.pressed))
-- SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 2 -> AF !button_2.pressed)
-- SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 3 -> AF !button_3.pressed)

SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 1 & button_1.pressed -> button_1.reset)
SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 2 & button_2.pressed -> button_2.reset)
SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 3 & button_3.pressed -> button_3.reset)

SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 1 & inner_1.pressed -> inner_1.reset)
SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 2 & inner_2.pressed -> inner_2.reset)
SPEC AG (ctrl.direction = stop & door.status = open & cabin.floor = 3 & inner_3.pressed -> inner_3.reset)


  -- REQ9: The cabin can move only when the door is closed.
SPEC AG (ctrl.direction != stop -> door.status = closed)

  -- REQ10: If no button is pressed, the controller must issue no commands
  --      and the cabin must be stopped.
SPEC AG (!button_1.pressed & !button_2.pressed & !button_3.pressed &!inner_1.pressed &!inner_2.pressed & !inner_3.pressed -> ctrl.direction = stop & ctrl.door_cmd = nop)

---------------------------------------------------------------------------