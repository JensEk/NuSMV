MODULE main
VAR
location : array 0..3 of boolean;
traveling: array 0..3 of boolean;
torch: boolean;
time: 0..100;

ASSIGN
init (location[0]) := FALSE;
init (location[1]) := FALSE;
init (location[2]) := FALSE;
init (location[3]) := FALSE;
init (torch) := FALSE;
init (time) := 0;
init (traveling[0]) := FALSE;
init (traveling[1]) := FALSE;
init (traveling[2]) := FALSE;
init (traveling[3]) := FALSE;

next (torch) := case
traveling[0] & torch = location[0] : !torch;
traveling[1] & torch = location[1] : !torch;
traveling[2] & torch = location[2] : !torch;
traveling[3] & torch = location[3] : !torch;
TRUE : torch;
esac;

next (location[0]) := case
traveling[0] & torch = location[0] : !location[0];
TRUE : location[0];
esac;

next (location[1]) := case
traveling[1] & torch = location[1] : !location[1];
TRUE : location[1];
esac;

next (location[2]) := case
traveling[2] & torch = location[2] : !location[2];
TRUE : location[2];
esac;

next (location[3]) := case
traveling[3] & torch = location[3] : !location[3];
TRUE : location[3];
esac;

next(time) := case
time > 90: time;
location[0] & location[1] & location[2] & location[3]: time;
traveling[3]: time + 10;
traveling[2]: time + 5;
traveling[1]: time + 2;
traveling[0]: time + 1;
TRUE : time;
esac;

LTLSPEC
  !((count(traveling[0], traveling[1], traveling[2], traveling[3]) <= 2) U ( (location[0] & location[1] & location[2] & location[3] & time <= 17)) )


/--
-- specification !(count(traveling[0], traveling[1], traveling[2], traveling[3]) <= 2 U ((((location[0] & location[1]) & location[2]) & location[3]) & time <= 17))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample
Trace Type: Counterexample

  # All participants start at the "wrong" side of the bridge, with one of them carrying the torch.
  -> State: 1.1 <-
    location[0] = FALSE
    location[1] = FALSE
    location[2] = FALSE
    location[3] = FALSE
    traveling[0] = FALSE
    traveling[1] = FALSE
    traveling[2] = FALSE
    traveling[3] = FALSE
    torch = FALSE
    time = 0
    
  # Participants "0" and "1" start traveling, carrying the torch.
  -> State: 1.2 <-
    traveling[0] = TRUE
    traveling[1] = TRUE
  
  # Participants "0" and "1" cross the bridg with the torch and particpant "1" start to go back, hence why no change in traveling[1].
  -> State: 1.3 
    location[0] = TRUE
    location[1] = TRUE
    traveling[0] = FALSE
    torch = TRUE
    time = 2
    
  Participant "1" returns and participants "2" and "3" start crossing with the torch.
  -> State: 1.4 <-
    location[1] = FALSE
    traveling[1] = FALSE
    traveling[2] = TRUE
    traveling[3] = TRUE
    torch = FALSE
    time = 4

  # Participants "2" and "3" cross the bridge with the torch and stays while participant "0" starts to go back.
  -> State: 1.5 <-
    location[2] = TRUE
    location[3] = TRUE
    traveling[0] = TRUE
    traveling[2] = FALSE
    traveling[3] = FALSE
    torch = TRUE
    time = 14
    
  # Participant "0" returns to the "wrong" side and "0" and "1" start traveling back to the "right" side.
  -> State: 1.6 <-
    location[0] = FALSE
    traveling[1] = TRUE
    torch = FALSE
    time = 15
  
  # Participants "0" and "1" cross the bridge with the torch finally all 4 participants are on the "right" side.
  -> State: 1.7 <-
    location[0] = TRUE
    location[1] = TRUE
    traveling[1] = FALSE
    torch = TRUE
    time = 17
    
  # Loop starts, and all participants have now crossed the bridge.
  -- Loop starts here
  -> State: 1.8 <-
    location[0] = FALSE
    traveling[0] = FALSE
    torch = FALSE
  -> State: 1.9 <-

--/